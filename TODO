# Payment Gateway

- Improved the argument  (working on)
- Add and validate args (working on)
- Start working on the DATA repository (done)

update the TDO to we can save the correct model to the database  (done)
* then lets write up some unit tests and get the ball rolling
Create a factory new func for the payment request

(DONE) Within the Unit Tests we need to use the following to setup the payment

```
clientPaymentRequest := repository.NewClientPaymentRequest(data)
```

test validation within the CMD/cobra and the Repos.
Think about a way to return validation data (extend the error interface)

Move Unit Test to their own package and fix and references

# Repos  - Change return object - DONE
return the object created instead of a string. Allowing the UI to get the RequestID

# read an item using CLI - PENDING
Allow the cli to read an item from the database

This is working, we can delte an payment request and mark it as deleted.
Bug: When deleting an payment request that does not exist, we should get an error.
But this is returning as a success.

# Local / business Directory
Using a directory to allow key terms to be renamed - AKA 'RequestID' to 'CPR ID'

# Search for a Payment Request
Allow the CLI to search for a payment request using filters.
Using HATEOAS to allow the user to navigate the data and page.

# Questions
Should we have separate types for CMD and repos DTOs?
Yes - this allow untrusted data to be ETLs into the system and then validated before sending to the repos.

We may wish to simplify the commands and abstract some complexity away from the user.
This will form the API RPC fields.

However, this means we need to map the CMD DTOs to the Repo DTOs.
This makes Naming conventions tricky. We need to be able to understand if we are working
with the  CMD or the Repos?

Maybe Repos DTOs should only be used within the Repos package?
But should we be sending CMD to the repos?


